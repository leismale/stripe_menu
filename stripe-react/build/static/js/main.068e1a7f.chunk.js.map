{"version":3,"sources":["components/NavItem.js","components/NavMenuContent.js","components/NavMenu.js","navData.js","hooks/useToggle.js","hooks/useResize.js","views/Nav.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","props","react_default","a","createElement","onClick","e","toggleClass","className","data-active","isActive","data","data-dropdown","title","NavMenuContent","react_router_dom","to","content","url","heading","text","NavMenu","ref","element","resize","getBoundingClientRect","Object","values","map","i","components_NavMenuContent","key","concat","navItems","products","developers","company","navMenus","useToggle","_useState","useState","_useState2","slicedToArray","active","setActive","_useState3","_useState4","elemData","setElemData","event","persist","target","dropdown","dataset","includes","useResize","style","setStyle","width","setWidth","_useState5","_useState6","setHeight","size","height","Nav","_useToggle","_useResize","position","Math","round","max","left","dropdownStyles","transform","react","item","components_NavItem","toLowerCase","entries","menu","components_NavMenu","App","views_Nav","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.068e1a7f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavItem = props => {\r\n    return (\r\n        <li onClick={e => props.toggleClass(e)} className=\"nav__item\" data-active={props.isActive == props.data ? \"true\" : \"false\"} data-dropdown={props.data}>\r\n            {props.title}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default NavItem;","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst NavMenuContent = props => {\r\n    return (\r\n        <NavLink to={props.content.url}>\r\n            <h3>{props.content.heading}</h3>\r\n            <p>{props.content.text}</p>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default NavMenuContent;\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport NavMenuContent from './NavMenuContent';\r\n\r\nconst NavMenu = props => {\r\n    let refCallback = element => {\r\n        if (element) {\r\n            props.resize(props.data, element.getBoundingClientRect(), props.isActive)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div ref={refCallback} className=\"dropdown__container__group\" data-active={props.isActive == props.data ? \"true\" : \"false\"} data-dropdown={props.data}>\r\n            {Object.values(props.content).map((content, i) => <NavMenuContent content={content} key={`${props.data}-${i}`} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavMenu;","export let navItems = {\r\n    products: {\r\n        title: \"Products\"\r\n    },\r\n    developers: {\r\n        title: \"Developers\"\r\n    },\r\n    company: {\r\n        title: \"Company\"\r\n    }\r\n}\r\n\r\nexport let navMenus = {\r\n    products: [\r\n        {\r\n            heading: \"Payments\",\r\n            url: \"payments\",\r\n            text: \"A complete payments platform engineered for growth.\"\r\n        },\r\n        {\r\n            heading: \"Billing\",\r\n            url: \"billing\",\r\n            text: \"Build and scale your recurring business model.\"\r\n        },\r\n        {\r\n            heading: \"Connect\",\r\n            url: \"connect\",\r\n            text: \"Everything platforms need to get sellers paid.\"\r\n        }\r\n    ],\r\n    developers: [\r\n        {\r\n            heading: \"Documentation\",\r\n            url: \"documentation\",\r\n            text: \"Start integrating Stripe’s products.\"\r\n        },\r\n        {\r\n            heading: \"Full API reference\",\r\n            url: \"api\",\r\n            text: \"\"\r\n        },\r\n        {\r\n            heading: \"API Status\",\r\n            url: \"api-status\",\r\n            text: \"\"\r\n        },\r\n        {\r\n            heading: \"Open source\",\r\n            url: \"open-source\",\r\n            text: \"\"\r\n        }],\r\n    company: [\r\n        {\r\n            heading: \"About Stripe\",\r\n            url: \"about\",\r\n            text: \"Start integrating Stripe’s products and tools.\"\r\n        },\r\n        {\r\n            heading: \"Customers\",\r\n            url: \"customers\",\r\n            text: \"\"\r\n        },\r\n        {\r\n            heading: \"Partner program\",\r\n            url: \"partner-program\",\r\n            text: \"\"\r\n        },\r\n        {\r\n            heading: \"Jobs\",\r\n            url: \"jobs\",\r\n            text: \"\"\r\n        }]\r\n}","import { useState, useEffect } from 'react';\r\n\r\nconst useToggle = () => {\r\n    const [active, setActive] = useState(\"\");\r\n    let [elemData, setElemData] = useState(\"\");\r\n\r\n    const toggleClass = (event) => {\r\n        event.persist();\r\n        setElemData(event.target.getBoundingClientRect())\r\n\r\n        let dropdown = event.target.dataset.dropdown\r\n\r\n        if (active.includes(dropdown)) {\r\n            setActive(\"\")\r\n        } else {\r\n            setActive(dropdown)\r\n        }\r\n    };\r\n\r\n    return {\r\n        toggleClass,\r\n        active,\r\n        elemData\r\n    };\r\n}\r\n\r\nexport default useToggle;\r\n\r\n","import { useState } from 'react';\r\n\r\nconst useResize = () => {\r\n    const [style, setStyle] = useState({});\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n\r\n    const resize = (element, size, active) => {\r\n        if (active === element && width !== size.width) {\r\n            setWidth(size.width)\r\n            setHeight(size.height)\r\n            setStyle({\r\n                width: `${size.width}px`,\r\n                height: `${size.height}px`\r\n            })\r\n        }\r\n    };\r\n\r\n    return {\r\n        resize,\r\n        style\r\n    };\r\n}\r\n\r\nexport default useResize;\r\n\r\n","import React, { Fragment, useEffect } from 'react';\r\n\r\nimport NavItem from '../components/NavItem'\r\nimport NavMenu from '../components/NavMenu'\r\n\r\nimport { navItems, navMenus } from '../navData';\r\nimport useToggle from \"../hooks/useToggle\";\r\nimport useResize from \"../hooks/useResize\";\r\n\r\nconst Nav = (props) => {\r\n    const { active, elemData, toggleClass } = useToggle();\r\n    const { style, resize } = useResize();\r\n\r\n    let position = Math.round(Math.max(elemData.left + elemData.width / 2, 10));\r\n\r\n    let dropdownStyles = {\r\n        transform: `translateX(${position}px)`\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <nav>\r\n                <ul className=\"nav__items\">\r\n                    {Object.values(navItems).map(item => <NavItem isActive={active} toggleClass={toggleClass} title={item.title} data={(item.title.toLowerCase())} key={item.title} />)}\r\n                </ul>\r\n            </nav>\r\n\r\n            <div className=\"dropdown\" style={dropdownStyles} data-active={active !== \"\" ? \"true\" : \"false\"}>\r\n                <div className=\"dropdown__background\" style={style}></div>\r\n                <div className=\"dropdown__container\">\r\n                    {Object.entries(navMenus).map(menu => <NavMenu resize={resize} isActive={active} content={menu[1]} data={(menu[0].toLowerCase())} key={menu[0].toLowerCase()} />)}\r\n                </div>\r\n            </div>\r\n        </Fragment >\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Nav from './views/Nav'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}